using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace Common_Objects.Models
{
    public class EmployeeModel
    {
        public Employee GetSpecificEmployee(int employeeId)
        {
            Employee employee;

            var dbContext = new SDIIS_DatabaseEntities();
            try
            {
                var employees = (from e in dbContext.Employees
                                 where e.Employee_Id.Equals(employeeId)
                                 select e).ToList();

                //agent = PopulateAdditionalItems(agents, dbContext).FirstOrDefault();




                employee = (from e in employees
                            select e).FirstOrDefault();


                if (employee.Is_SocialWorker)
                {
                    var socialWorkerPracticeNumber = dbContext.Social_Workers.Where(x => x.User_Id == employee.User_Id).Select(y => y.SocialWorkerPracticeNumber).FirstOrDefault();
                    employee.PracticeNumber = socialWorkerPracticeNumber;
                }

            }
            catch (Exception ex)
            {
                return null;
            }

            return employee;
        }

        public Employee GetSpecificUser(string userName)
        {
            Employee employee;

            var dbContext = new SDIIS_DatabaseEntities();
            try
            {
                var employees = (from e in dbContext.Employees
                                 where e.User.User_Name.Equals(userName)
                                 select e).ToList();

                //agent = PopulateAdditionalItems(agents, dbContext).FirstOrDefault();

                employee = (from e in employees
                            select e).FirstOrDefault();
            }
            catch (Exception ex)
            {
                return null;
            }

            return employee;
        }

        public List<Employee> GetListOfEmployees(bool showInActive, bool showDeleted, string SearchPersalNumber, string SearchEmail, string SearchFirstName, string SearchLastName)
        {
            List<Employee> listOfEmployees;

            var dbContext = new SDIIS_DatabaseEntities();
            try
            {
                var employees = (from e in dbContext.Employees
                                 where e.Is_Active || e.Is_Active.Equals(!showInActive)
                                 where !e.Is_Deleted || e.Is_Deleted.Equals(showDeleted)
                                 select e).ToList();
                if ((SearchPersalNumber != null && SearchPersalNumber != "")
                    ||
                    (SearchPersalNumber != null && SearchEmail != "" )
                    ||
                    (SearchFirstName != null && SearchFirstName != "")
                    ||
                    (SearchLastName != null && SearchLastName != "" )
                    )
                    {
                    employees = (from e in dbContext.Employees
                                 where e.Is_Active || e.Is_Active.Equals(!showInActive)
                                 where !e.Is_Deleted || e.Is_Deleted.Equals(showDeleted)
                                 where e.Persal_Number.Contains(SearchPersalNumber)
                                 where e.User.Email_Address.Contains(SearchEmail)
                                 where e.User.First_Name.Contains(SearchFirstName)
                                 where e.User.Last_Name.Contains(SearchLastName)
                                 select e).ToList();
                }            



                    //listOfAgents = PopulateAdditionalItems(agents, dbContext);

                    listOfEmployees = (from e in employees
                                       select e).ToList();
               
            }
            catch (Exception ex)
            {
                return null;
            }

            return listOfEmployees;

        }

        public List<Employee> GetListOfEmployees(bool showInActive, bool showDeleted)
        {
            List<Employee> listOfEmployees;

            var dbContext = new SDIIS_DatabaseEntities();
            try
            {
                var employees = (from e in dbContext.Employees
                                 where e.Is_Active || e.Is_Active.Equals(!showInActive)
                                 where !e.Is_Deleted || e.Is_Deleted.Equals(showDeleted)
                                 select e).ToList();

                //listOfAgents = PopulateAdditionalItems(agents, dbContext);

                listOfEmployees = (from e in employees
                                   select e).ToList();
            }
            catch (Exception ex)
            {
                return null;
            }

            return listOfEmployees;

        }
        //Herman Update
        public bool CheckIfSupervisor(int Id)
        {
            var dbContext = new SDIIS_DatabaseEntities();
            int? CheckIfSupervisor = (from a in dbContext.Employees
                                     where a.User_Id == Id
                                     select a.Supervisor_Id).FirstOrDefault();
            if (CheckIfSupervisor != null)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        // Kholo Update
        public SelectList GetListOfEmployeesInServicePoint(bool showInActive, bool showDeleted, int UserID)
        {
            //List<Employee> listOfEmployees;
            //var selectListEmployeT;
            var dbContext = new SDIIS_DatabaseEntities();


            // Emp Details
            var empDetail = (from e in dbContext.Employees
                             where e.User_Id == UserID
                             select e).FirstOrDefault();


            // Super Details
            //var empSuperVDetail = (from e in dbContext.Employees
            //                       where e.User_Id == empDetail.Supervisor_Id
            //                       select e).FirstOrDefault();


           // int? ServicePointId = empSuperVDetail.Service_Office_Id;

            //try
            //{
                var employees = (from e in dbContext.Employees
                                 where e.Is_Active || e.Is_Active.Equals(!showInActive)
                                 where !e.Is_Deleted || e.Is_Deleted.Equals(showDeleted)
                                 where e.Service_Office_Id == empDetail.Service_Office_Id
                                 where e.Supervisor_Id == null
                                 select e).ToList();

                //listOfAgents = PopulateAdditionalItems(agents, dbContext);

                var listOfEmployees = (from e in employees
                                       join b in dbContext.Users on e.User_Id equals b.User_Id
                                       orderby b.First_Name, b.Last_Name
                                       select new
                                       {
                                            e.Employee_Id,
                                            e.User_Id,
                                            e.Supervisor_Id,
                                            NameSurname = b.First_Name + " " + b.Last_Name
                                       }).ToList();

                var selectListEmploye = new SelectList(listOfEmployees, "User_Id", "NameSurname", 0);
                //selectListEmployeT = selectListEmploye;
            //}
            //catch (Exception ex)
            //{
            //    return null;
            //}

            return selectListEmploye;

        }

        // Kholo Update
        public SelectList GetListOfEmployeesCaseManager(bool showInActive, bool showDeleted, int UserID)
        {
            
            var dbContext = new SDIIS_DatabaseEntities();

            int employee_Id = (from a in dbContext.Employees
                               where a.User_Id == UserID
                               select a.Employee_Id).FirstOrDefault();
            // Get subordinates
            var empDetail = (from b in dbContext.Employees
                             where b.Supervisor_Id == employee_Id
                             select b).ToList();


            //try
            //{
            var employees = (from e in empDetail // dbContext.Employees
                             where e.Is_Active || e.Is_Active.Equals(!showInActive)
                             where !e.Is_Deleted || e.Is_Deleted.Equals(showDeleted)
                             //where e.Service_Office_Id == ServicePointId
                             where e.Supervisor_Id != null
                             select e).ToList();

            //listOfAgents = PopulateAdditionalItems(agents, dbContext);

            var listOfEmployees = (from e in empDetail
                                   join b in dbContext.Users on e.User_Id equals b.User_Id
                                   orderby b.First_Name, b.Last_Name
                                   select new
                                   {
                                       e.Employee_Id,
                                       e.User_Id,
                                       e.Supervisor_Id,
                                       NameSurname = b.First_Name + " " + b.Last_Name
                                   }).ToList();

            var selectListEmploye = new SelectList(listOfEmployees, "User_Id", "NameSurname", 0);
            //selectListEmployeT = selectListEmploye;
            //}
            //catch (Exception ex)
            //{
            //    return null;
            //}

            return selectListEmploye;

        }


        public Employee CreateEmployee(string firstName, string lastName, string initials, string emailAddress, string persalNumber, int? headOfDepartmentId, int? supervisorId, string phoneNumber, string mobilePhoneNumber, 
            int? genderId, int? raceId, string idNumber, int? jobPositionId, int? payPointId, int serviceOfficeId, int? salaryLevelId, bool isShiftWorker, bool isCasualWorker, 
            bool isActive, bool isDeleted, DateTime dateCreated, string createdBy, bool isSocialWorker, string practiceNumber)
        {
            Employee newEmployee;

            using (var dbContext = new SDIIS_DatabaseEntities())
            {
                User newUser;

                var user = new User
                {
                    User_Name = string.Format("{0}{1}", firstName.Substring(0, 1), lastName),
                    Password = "password1",
                    First_Name = firstName,
                    Last_Name = lastName,
                    Initials = initials,
                    Email_Address = emailAddress,
                    Is_Active = isActive,
                    Is_Deleted = isDeleted,
                    Date_Created = dateCreated,
                    Created_By = createdBy
                };

                try
                {
                    newUser = dbContext.Users.Add(user);
                    dbContext.SaveChanges();



                }
                catch (Exception)
                {
                    return null;
                }

                if (newUser == null)
                {
                    return null;
                }

                var employee = new Employee
                {
                    User_Id = newUser.User_Id,
                    Persal_Number = persalNumber,
                    Head_Of_Department_Id = headOfDepartmentId,
                    Supervisor_Id = supervisorId,
                    Phone_Number = phoneNumber,
                    Mobile_Phone_Number = mobilePhoneNumber,
                    Gender_Id = genderId,
                    Race_Id = raceId,
                    ID_Number = idNumber,
                    Job_Position_Id = jobPositionId,
                    Paypoint_Id = payPointId,
                    Service_Office_Id = serviceOfficeId,
                    Salary_Level_Id = salaryLevelId,
                    Is_Shift_Worker = isShiftWorker,
                    Is_Casual_Worker = isCasualWorker,
                    Is_Active = isActive,
                    Is_Deleted = isDeleted,
                    Is_SocialWorker = isSocialWorker,
                    Date_Created = dateCreated,
                    Created_By = createdBy
                };

                try
                {
                    newEmployee = dbContext.Employees.Add(employee);
                    dbContext.SaveChanges();


                    if (isSocialWorker == true)
                    {
                        int userid = newEmployee.User_Id;

                        //get the supervisor employee ID to be used to get the user id that we will unse to link the social worker table correctly
                        var employeeUserId = dbContext.Employees.Where(x => x.Employee_Id == newEmployee.Supervisor_Id).Select(y => y.User_Id).FirstOrDefault();

                        //get socialworker id for the supervisor
                        var supervisorSocialWorkerID = dbContext.Social_Workers.Where(x => x.User_Id == employeeUserId).Select(y => y.Social_Worker_Id).FirstOrDefault();

                        var socialWorkerDetails = (from s in dbContext.Social_Workers
                                                   where s.User_Id == userid
                                                   select s).FirstOrDefault();

                        if (socialWorkerDetails == null)
                        {
                            Social_Worker sw = new Social_Worker();
                            sw.Gender_Id = newEmployee.Gender_Id;
                            sw.ID_Number = newEmployee.ID_Number;
                            sw.User_Id = newEmployee.User_Id;
                            sw.Is_Active = newEmployee.Is_Active;
                            sw.Is_Deleted = newEmployee.Is_Deleted;
                            sw.Mobile_Phone_Number = newEmployee.Mobile_Phone_Number;
                            sw.Modified_By = createdBy;
                            sw.Organization_Id = 1;//Thabiso to verify
                            sw.Service_Office_Id = newEmployee.Service_Office_Id;
                            sw.SocialWorkerPracticeNumber = practiceNumber;
                            sw.Date_Created = DateTime.Now;
                            sw.Date_Last_Modified = DateTime.Now;
                            sw.Created_By = createdBy;
                            sw.Phone_Number = newEmployee.Phone_Number;
                            if (supervisorId != null)
                            {
                                sw.Reports_To_Social_Worker_Id = supervisorSocialWorkerID;
                            }
                           

                            dbContext.Social_Workers.Add(sw);
                            dbContext.SaveChanges();
                        }
                        else
                        {
                            socialWorkerDetails.Gender_Id = newEmployee.Gender_Id;
                            socialWorkerDetails.ID_Number = newEmployee.ID_Number;
                            socialWorkerDetails.Is_Active = newEmployee.Is_Active;
                            socialWorkerDetails.Is_Deleted = newEmployee.Is_Deleted;
                            socialWorkerDetails.Mobile_Phone_Number = newEmployee.Mobile_Phone_Number;
                            socialWorkerDetails.Modified_By = createdBy;
                            socialWorkerDetails.Organization_Id = 1;//Thabiso to verify
                            socialWorkerDetails.Service_Office_Id = newEmployee.Service_Office_Id;
                            socialWorkerDetails.SocialWorkerPracticeNumber = practiceNumber;
                            socialWorkerDetails.Date_Created = DateTime.Now;
                            socialWorkerDetails.Date_Last_Modified = DateTime.Now;
                            socialWorkerDetails.Created_By = createdBy;
                            socialWorkerDetails.Phone_Number = newEmployee.Phone_Number;
                            if (supervisorId != null)
                            {
                                socialWorkerDetails.Reports_To_Social_Worker_Id = supervisorSocialWorkerID;
                            }
                           
                            dbContext.SaveChanges();
                        }

                    }

                }
                catch (Exception)
                {
                    return null;
                }
            }

            return newEmployee;
        }

        public Employee EditEmployee(int employeeId, string firstName, string lastName, string initials, string emailAddress, string persalNumber, int? headOfDepartmentId, int? supervisorId, string phoneNumber, string mobilePhoneNumber, 
            int? genderId, int? raceId, string idNumber, int? jobPositionId, int? payPointId, int serviceOfficeId, int? salaryLevelId, bool isShiftWorker, bool isCasualWorker, 
            bool isActive, bool isDeleted, DateTime dateLastModified, string modifiedBy, bool isSocialWorker, string practiceNumber)
        {
            Employee editEmployee;

            using (var dbContext = new SDIIS_DatabaseEntities())
            {
                try
                {
                    editEmployee = (from e in dbContext.Employees
                                    where e.Employee_Id.Equals(employeeId)
                                    select e).FirstOrDefault();

                    if (editEmployee == null) return null;

                    editEmployee.User.First_Name = firstName;
                    editEmployee.User.Last_Name = lastName;
                    editEmployee.User.Initials = initials;
                    editEmployee.User.Email_Address = emailAddress;
                    editEmployee.Persal_Number = persalNumber;
                    editEmployee.Head_Of_Department_Id = headOfDepartmentId;
                    editEmployee.Supervisor_Id = supervisorId;
                    editEmployee.Phone_Number = phoneNumber;
                    editEmployee.Mobile_Phone_Number = mobilePhoneNumber;
                    editEmployee.Gender_Id = genderId;
                    editEmployee.Race_Id = raceId;
                    editEmployee.ID_Number = idNumber;
                    editEmployee.Job_Position_Id = jobPositionId;
                    editEmployee.Paypoint_Id = payPointId;
                    editEmployee.Service_Office_Id = serviceOfficeId;
                    editEmployee.Salary_Level_Id = salaryLevelId;
                    editEmployee.Is_Shift_Worker = isShiftWorker;
                    editEmployee.Is_Casual_Worker = isCasualWorker;
                    editEmployee.Is_Active = isActive;
                    editEmployee.Is_Deleted = isDeleted;
                    editEmployee.Date_Last_Modified = dateLastModified;
                    editEmployee.Modified_By = modifiedBy;
                    editEmployee.Is_SocialWorker = isSocialWorker;
                    
                    dbContext.SaveChanges();

                    if (isSocialWorker == true)
                    {
                        int userid = editEmployee.User_Id;


                        //get the supervisor employee ID to be used to get the user id that we will unse to link the social worker table correctly
                        var employeeUserId = dbContext.Employees.Where(x => x.Employee_Id == editEmployee.Supervisor_Id).Select(y => y.User_Id).FirstOrDefault();

                        //get socialworker id for the supervisor
                        var supervisorSocialWorkerID = dbContext.Social_Workers.Where(x => x.User_Id == employeeUserId).Select(y => y.Social_Worker_Id).FirstOrDefault();

                        var socialWorkerDetails = (from s in dbContext.Social_Workers
                                                   where s.User_Id == userid
                                                   select s).FirstOrDefault();

                        if (socialWorkerDetails == null)
                        {
                            Social_Worker sw = new Social_Worker();
                            sw.Gender_Id = editEmployee.Gender_Id;
                            sw.ID_Number = editEmployee.ID_Number;
                            sw.User_Id = editEmployee.User_Id;
                            sw.Is_Active = editEmployee.Is_Active;
                            sw.Is_Deleted = editEmployee.Is_Deleted;
                            sw.Mobile_Phone_Number = editEmployee.Mobile_Phone_Number;
                            sw.Modified_By = modifiedBy;
                            sw.Organization_Id = 1;//Thabiso to verify
                            sw.Service_Office_Id = editEmployee.Service_Office_Id;
                            sw.SocialWorkerPracticeNumber = practiceNumber;
                            sw.Date_Created = DateTime.Now;
                            sw.Date_Last_Modified = DateTime.Now;
                            sw.Created_By = modifiedBy;
                            sw.Phone_Number = editEmployee.Phone_Number;
                            if (supervisorId != null)
                            {
                                sw.Reports_To_Social_Worker_Id = supervisorSocialWorkerID;
                            }
                            
                            dbContext.Social_Workers.Add(sw);
                            dbContext.SaveChanges();
                        }else
                        {
                            socialWorkerDetails.Gender_Id = editEmployee.Gender_Id;
                            socialWorkerDetails.ID_Number = editEmployee.ID_Number;
                            socialWorkerDetails.Is_Active = editEmployee.Is_Active;
                            socialWorkerDetails.Is_Deleted = editEmployee.Is_Deleted;
                            socialWorkerDetails.Mobile_Phone_Number = editEmployee.Mobile_Phone_Number;
                            socialWorkerDetails.Modified_By = modifiedBy;
                            socialWorkerDetails.Organization_Id = 1;//Thabiso to verify
                            socialWorkerDetails.Service_Office_Id = editEmployee.Service_Office_Id;
                            socialWorkerDetails.SocialWorkerPracticeNumber = practiceNumber;
                            socialWorkerDetails.Date_Created = DateTime.Now;
                            socialWorkerDetails.Date_Last_Modified = DateTime.Now;
                            socialWorkerDetails.Created_By = modifiedBy;
                            socialWorkerDetails.Phone_Number = editEmployee.Phone_Number;
                            if (supervisorId != null)
                            {
                                socialWorkerDetails.Reports_To_Social_Worker_Id = supervisorSocialWorkerID;
                            }
                            
                            dbContext.SaveChanges();
                        }

                    }

                }
                catch (Exception ex)
                {
                    return null;
                }
            }

            return editEmployee;
        }

        public Employee SetEmployeeIsActive(int employeeId, bool isActive)
        {
            Employee editEmployee;

            using (var dbContext = new SDIIS_DatabaseEntities())
            {
                try
                {
                    editEmployee = (from e in dbContext.Employees
                                    where e.Employee_Id.Equals(employeeId)
                                    select e).FirstOrDefault();

                    if (editEmployee == null) return null;

                    editEmployee.Is_Active = isActive;

                    dbContext.SaveChanges();
                }
                catch (Exception)
                {
                    return null;
                }
            }

            return editEmployee;
        }

        public Employee SetEmployeeIsDeleted(int employeeId, bool isDeleted)
        {
            Employee editEmployee;

            using (var dbContext = new SDIIS_DatabaseEntities())
            {
                try
                {
                    editEmployee = (from e in dbContext.Employees
                                    where e.Employee_Id.Equals(employeeId)
                                    select e).FirstOrDefault();

                    if (editEmployee == null) return null;

                    editEmployee.Is_Deleted = isDeleted;
                    editEmployee.User.Is_Deleted = isDeleted;

                    dbContext.SaveChanges();
                }
                catch (Exception)
                {
                    return null;
                }
            }

            return editEmployee;
        }
    }
}